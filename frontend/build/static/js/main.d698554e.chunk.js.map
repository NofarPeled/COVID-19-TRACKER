{"version":3,"sources":["assets/img/loader.svg","assets/img/corona-virus.png","components/GraphPreview.js","components/CountriesCasesTable.js","components/FilterBySelect.js","store/types.js","services/httpService.js","services/utilService.js","services/trackerService.js","store/actions/trackerAction.js","components/FilterCountries.js","components/Navbar.js","components/Loader.js","pages/HomePage.js","components/GraphList.js","pages/CountryPage.js","components/Header.js","App.js","store/reducers/trackerReducer.js","store/reducers/index.js","serviceWorker.js","index.js"],"names":["module","exports","GraphPreview","props","graphInfo","options","title","text","series","data","numList","xAxis","categories","xList","colors","className","Highcharts","CountriesCasesTable","countries","useState","order","key","sortBy","setSort","tableHead","Object","keys","map","onClick","parseInt","countriesList","sort","a","b","firstCountry","secondCountry","isFinite","country","values","val","idx","FilterBySelect","select","selectList","option","value","name","defaultValue","default","onChange","ev","filterSelected","target","types","SET_COUNTRY","SET_COUNTRIES","SET_COUNTRIES_NAMES_LIST","endpoint","method","query","axios","url","params","res","response","error","defaults","withCredentials","ajax","getFormatDate","date","Date","getDate","getMonth","getFullYear","getAllCountries","getByCountry","getCountriesNamesList","httpService","localStorage","getItem","get","setItem","createdAt","utilService","sortedCountries","Country","setCountry","type","dispatch","trackerService","countryData","FilterCountries","useDispatch","countriesNameList","currCountry","Navbar","useSelector","state","trackerReducer","countriesNames","path","to","Loader","src","require","alt","HomePage","Confirmed","GraphList","graphCategories","graphList","category","CountryPage","countryName","match","useEffect","Header","App","countriesData","countriesNamesList","component","initState","countriesName","action","combinedReducer","combineReducers","Boolean","window","location","hostname","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,0KCmC5BC,EA/BM,SAAAC,GAAU,IAAD,EACQA,EAAMC,UAElCC,EAAU,CACZC,MAAO,CACHC,KALkB,EAClBD,OAMJE,OAAQ,CAAC,CACLC,KARkB,EACXC,QAQPJ,MAAO,aAEXK,MAAO,CACHC,WAZkB,EACFC,OAapBC,OAAQ,CAAC,UAGb,OACI,yBACIC,UAAY,qBAEZ,kBAAC,IAAD,CAEIC,WAAeA,IACfX,QAAYA,M,QC8CbY,EAxEa,SAAAd,GAAU,IAC1Be,EAAcf,EAAde,UADyB,EAEPC,mBAAS,CAACC,MAAO,EAAGC,IAAK,gBAFlB,mBAE1BC,EAF0B,KAElBC,EAFkB,KAK3BC,EAAYC,OAAOC,KAAKR,EAAUT,KAAK,IAAIkB,KAAI,SAAArB,GACjD,OACI,wBACIe,IAAQf,EACRsB,QAAY,kBAAML,EAAQ,CACtBH,MAAOE,EAAOD,MAAQf,GACS,EAAzBuB,SAASP,EAAOF,OAChBE,EAAOF,MAAOC,IAAKf,MAE7B,wBAAIS,UAAY,sBAERT,EAEJ,0BAAMS,UAAY,cAAlB,eAmBVe,EAVsBZ,EAAUT,KAAKsB,MAAK,SAACC,EAAGC,GAChD,IAAMC,GAAiC,IAAlBZ,EAAOF,MAAeY,EAAIC,EACzCE,GAAkC,IAAlBb,EAAOF,MAAea,EAAID,EAEhD,OAAOI,SAASF,EAAaZ,EAAOD,KAAOc,EAAcb,EAAOD,MAC1Da,EAAaZ,EAAOD,KAAOc,EAAcb,EAAOD,KAChDe,SAASF,EAAaZ,EAAOD,OAAS,EAAI,KAIVM,KAAI,SAAAU,GAC1C,OACI,wBAAIhB,IAAG,UAAQgB,EAAQ,kBAAhB,QACDZ,OAAOa,OAAOD,GAASV,KAAI,SAACY,EAAIC,GAC9B,OACI,wBAAInB,IAAG,UAAQmB,EAAR,YAAeH,EAAQ,kBAAvB,QACDE,UAS1B,OACI,6BAASxB,UAAY,yBACjB,2BAAOA,UAAY,sBACf,+BACI,4BAEQS,IAIZ,+BAEQM,MCnCTW,EA7BQ,SAAAtC,GAAU,IACtBuC,EAAWvC,EAAXuC,OAEFC,EAAaD,EAAOrC,QAAQsB,KAAK,SAAAiB,GACnC,OACK,4BAAQvB,IAAQuB,EAAOtC,MAAQuC,MAAUD,EAAOC,MAAQC,KAASJ,EAAOI,MAClEF,EAAOtC,UAKrB,OACI,4BACIS,UAAY,mBACZgC,aAAgBL,EAAOM,QACvBC,SACI,SAAAC,GACI/C,EAAMgD,eACN,CAAEL,KAAMJ,EAAOI,KAAMD,MAAOK,EAAGE,OAAOP,UAK1CF,I,uBCpBDU,EALD,CACVC,YAAa,cACbC,cAAe,gBACfC,yBAA0B,4B,6DCM9B,WAAoBC,GAApB,iCAAAzB,EAAA,6DAA8B0B,EAA9B,+BAAuC,MAAOjD,EAA9C,+BAAqD,KAAMkD,EAA3D,+BAAmE,KAAnE,kBAEsBC,IAAM,CACtBC,IARA,QAQgBJ,EAChBC,SACAjD,OACAqD,OAAQH,IANd,cAEUI,EAFV,yBAQWA,EAAItD,MARf,wCAUU,KAAIuD,SAASvD,KAAKwD,MAV5B,2D,sBAFAL,IAAMM,SAASC,iBAAkB,EAgBlB,eACTV,EAAUhD,EAAMkD,GAClB,O,2CAAOS,CAAKX,EAAU,MAAOhD,EAAMkD,ICzBxB,GACXU,cAGJ,SAAuBC,GAEnB,OADAA,EAAO,IAAIC,KAAKD,GAAQ,IAClB,GAAN,OAAWA,EAAKE,UAAhB,YAA+BF,EAAKG,WAAW,EAA/C,YAAsDH,EAAKI,iBCFhD,OACXC,gB,2CACAC,a,4CACAC,sB,wFAMJ,sBAAA7C,EAAA,+EAEqB8C,EAJG,WAExB,oJ,kEAQA,WAA4BzC,GAA5B,eAAAL,EAAA,6DACIK,EAAUA,IAEJ0C,aAAaC,QAdC,WAeVD,aAAaC,QAfH,WAgBV,UALd,kBAQ0BpB,IAAMqB,IAAN,mDAAuD5C,IARjF,cAQc0B,EARd,OASQgB,aAAaG,QApBG,UAoBsB7C,GAT9C,kBAUe,CACH5B,KAAMsD,EAAItD,KACV0E,UAAWC,EAAYf,cAAc,IAAIE,QAZrD,6G,kEAqBA,8BAAAvC,EAAA,+EAE0B4B,IAAMqB,IAAI,wCAFpC,cAEclB,EAFd,OAGcsB,EAAkBtB,EAAItD,KAAKsB,MAAK,SAACC,EAAGC,GACtC,OAAOD,EAAEsD,QAAUrD,EAAEqD,SAAW,EAAI,KAJhD,kBAMeD,GANf,6G,sBCvCA,IAAME,EAAa,SAAAlD,GACf,MAAO,CACHmD,KAAMnC,EAAMC,YACZjB,YAkBKuC,EAAe,SAAAvC,GACxB,8CAAO,WAAMoD,GAAN,eAAAzD,EAAA,+EAE2B0D,EAAed,aAAavC,GAFvD,OAEOsD,EAFP,OAGCF,EAASF,EAAWI,IAHrB,4HAAP,uDCYWC,EA9BS,SAAAzF,GACpB,IAAMsF,EAAWI,cACTxD,EAA+BlC,EAA/BkC,QAEFM,EAFiCxC,EAAtB2F,kBAEoBnE,KAAI,SAAAoE,GACrC,MAAO,CACHlD,MAAOkD,EAAYT,QACnBhF,MAAOyF,EAAYT,YAQ3B,OACI,6BAASvE,UAAY,4BACjB,kBAAC,EAAD,CACI2B,OAAU,CACNI,KAAM,UACNzC,QAASsC,EACTK,QAASX,GAEbc,eAZW,SAAAC,GACnBqC,EAASb,EAAaxB,EAAOP,aCetBmD,EA5BA,SAAA7F,GAEX,IAAMkC,EAAU4D,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAe9D,WACpDnB,EAAY+E,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAejF,aACtD4E,EAAoBG,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAeC,kBAEpE,OACI,6BAASrF,UAAY,qBAEb+E,GAA+B,OAAVzD,IACb,kBAAC,EAAD,CACIA,QAAYA,EAAQ5B,KAAK,GAAG6E,QAC5BQ,kBAAsBA,IAKlC3F,EAAMkG,MAAoB,OAAZhE,EACR,kBAAC,IAAD,CAAStB,UAAY,iBAAiBuF,GAAM,KAA5C,cACKnG,EAAMkG,MAAoB,OAAZhE,GACX,kBAAC,IAAD,CAAStB,UAAY,iBAAiBuF,GAAE,mBAAiBjE,EAAQ5B,KAAK,GAAG6E,UAAajD,EAAQ5B,KAAK,GAAG6E,QAAtG,gBAGlB,wBAAIvE,UAAY,oBAAhB,oBAAqDZ,EAAMkG,MAAoB,OAAZhE,EAAmBA,EAAQ8C,UAAYjE,EAAYA,EAAUiE,UAAY,aCdzIoB,EAbA,WAEX,OACI,6BAASxF,UAAY,kBACjB,yBACIyF,IAAQC,EAAQ,IAChB1F,UAAY,aACZ2F,IAAM,cCoCPC,EApCE,WAEb,IAAMtE,EAAU4D,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAe9D,WACpDnB,EAAY+E,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAejF,aAEtDd,EAAYiC,EACZ,CACE3B,QAAS2B,EAAQ5B,KAAKkB,KAAI,SAAAY,GACtB,OAAOA,EAAIqE,aAEf/F,MAAOwB,EAAQ5B,KAAKkB,KAAI,SAAAY,GACpB,OAAO6C,EAAYf,cAAc9B,EAAIgC,SAEzCjE,MAAO+B,EAAQ5B,KAAK,GAAG6E,QAAhB,qCAC6BjD,EAAQ5B,KAAK,GAAG6E,SAD7C,uEAIT,KAEN,OACI,6BAASvE,UAAY,qBACjB,kBAAC,EAAD,MAEgB,OAAZsB,EACM,kBAAC,EAAD,CAAcjC,UAAcA,IAC5B,kBAAC,EAAD,MAGQ,OAAdc,EACM,kBAAC,EAAD,CAAqBA,UAAcA,IACnC,kBAAC,EAAD,QCLP2F,EA9BG,SAAA1G,GAAU,IAChB2G,EAA6B3G,EAA7B2G,gBAAiBzE,EAAYlC,EAAZkC,QAEnB0E,EAAYD,EAAgBnF,KAAI,SAACqF,EAAUxE,GAC7C,OACI,wBAAIzB,UAAY,mBAAmBM,IAAG,UAAQmB,EAAR,mBAClC,kBAAC,EAAD,CACIpC,UAAa,CACTM,QAAS2B,EAAQ5B,KAAKkB,KAAI,SAAAY,GACtB,OAAOA,EAAIyE,MAEfnG,MAAOwB,EAAQ5B,KAAKkB,KAAI,SAAAY,GACpB,OAAO6C,EAAYf,cAAc9B,EAAIgC,SAEzCjE,MAAM,GAAD,OAAM0G,EAAN,iCAAyC3E,EAAQ5B,KAAK,GAAG6E,gBAOlF,OACI,wBAAIvE,UAAY,iCAERgG,ICODE,EA1BK,SAAA9G,GAChB,IAAMsF,EAAWI,cACTqB,EAAgB/G,EAAMgH,MAAMrD,OAA5BoD,YACF7E,EAAU4D,aAAY,SAAAC,GAAK,OAAIA,EAAMC,eAAe9D,WAQ1D,OANA+E,qBAAU,WACN3B,EAASb,EAAasC,MACvB,IAKC,6BAASnG,UAAY,wBACjB,kBAAC,EAAD,CAAQsF,KAAI,WAAQa,KAEJ,OAAZ7E,EACM,kBAAC,EAAD,CACEyE,gBAAoB,CAAC,YAAa,SAAU,YAAa,UACzDzE,QAAYA,IAEd,kBAAC,EAAD,QCZPgF,EAfA,WAEX,OACI,6BAAStG,UAAY,kBACjB,yBACIyF,IAAQC,EAAQ,IAChBC,IAAM,mBACN3F,UAAY,gBAEhB,0BAAMA,UAAY,4BAClB,wBAAIA,UAAY,gBAAhB,yBCsBGuG,G,MAtBH,WACV,IAAM7B,EAAWI,cAQjB,OANAuB,qBAAU,WACR3B,ERoBA,uCAAO,WAAMA,GAAN,eAAAzD,EAAA,+EAE6B0D,EAAef,kBAF5C,OAEO4C,EAFP,OAGC9B,EA5BD,CACHD,KAAMnC,EAAME,cACZrC,UA0B0BqG,IAHvB,4HAAP,uDQnBA9B,EAASb,KACTa,ER6BA,uCAAO,WAAMA,GAAN,eAAAzD,EAAA,+EAEkC0D,EAAeb,wBAFjD,OAEO2C,EAFP,OAGC/B,EAhCD,CACHD,KAAMnC,EAAMG,yBACZ4C,eA8BmCoB,IAHhC,4HAAP,0DQzBA,kBAAC,IAAD,KACE,yBAAKzG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsF,KAAO,iBAAiBoB,UAAcR,IAC7C,kBAAC,IAAD,CAAOZ,KAAO,IAAIoB,UAAcd,S,QCzBpCe,EAAY,CACdrF,QAAS,KACTnB,UAAW,KACXyG,cAAe,IAyBJxB,EAtBQ,WAAgC,IAA/BD,EAA8B,uDAAtBwB,EAAWE,EAAW,uCAClD,OAAQA,EAAOpC,MACX,KAAKnC,EAAME,cACP,OAAO,2BACA2C,GADP,IAEIhF,UAAW0G,EAAO1G,YAE1B,KAAKmC,EAAMC,YACP,OAAO,2BACA4C,GADP,IAEI7D,QAASuF,EAAOvF,UAExB,KAAKgB,EAAMG,yBACP,OAAO,2BACA0C,GADP,IAEIE,eAAgBwB,EAAOxB,iBAE/B,QACI,OAAOF,ICnBJ2B,EAJSC,YAAgB,CACpC3B,mBCQgB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCRN,IAAMgB,EAAQC,YACZC,EACAC,YAAgBC,MAGlBC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAUA,GAClB,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjF,GACLkF,QAAQlF,MAAMA,EAAMmF,c","file":"static/js/main.d698554e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.38ed5da9.svg\";","module.exports = __webpack_public_path__ + \"static/media/corona-virus.ee2cd1d9.png\";","import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nconst GraphPreview = props => {\n    const { title, numList, xList } = props.graphInfo;\n    \n    const options = {\n        title: {\n            text: title\n        },\n        series: [{\n            data: numList,\n            title: 'Confimed'\n        }],\n        xAxis: {\n            categories: xList\n        },\n        colors: ['green']\n    }\n\n    return (\n        <div \n            className = 'high-charts-graph'\n        >\n            <HighchartsReact \n                 \n                Highcharts = { Highcharts } \n                options = { options }\n            />\n        </div>\n\n    )\n}\n\nexport default GraphPreview;","import React, { useState } from 'react';\n\nconst CountriesCasesTable = props => {\n    const { countries } = props;\n    const [sortBy, setSort] = useState({order: 1, key: 'Total Cases'});\n\n    // creates a table header jsx\n    const tableHead = Object.keys(countries.data[0]).map(title => {\n        return (\n            <th \n                key = { title }\n                onClick = { () => setSort({ \n                    order: sortBy.key === title \n                        ? parseInt(sortBy.order)*(-1) \n                        : sortBy.order, key: title})\n                }> \n                <h4 className = 'table-header-title'>\n                    {\n                        title\n                    } \n                    <span className = 'sort-arrow'>\n                        &#8597;\n                    </span>\n                </h4>\n            </th>\n            )\n        })\n\n    // sort countries by sortBy        \n    const sortedCountriesList = countries.data.sort((a, b) => {\n        const firstCountry = sortBy.order === -1 ? a : b;\n        const secondCountry = sortBy.order === -1 ? b : a;\n        \n        return isFinite(firstCountry[sortBy.key] - secondCountry[sortBy.key]) \n            ? firstCountry[sortBy.key] - secondCountry[sortBy.key] \n            : isFinite(firstCountry[sortBy.key]) ? -1 : 1;\n    })\n\n    // transfer sorted countries array into jsx\n    const countriesList = sortedCountriesList.map(country => {\n        return (\n            <tr key = { `${country['Country, Other']}-tr` }>\n                { Object.values(country).map((val,idx) => {\n                    return (\n                        <td key = { `${idx}-${country['Country, Other']}-td` }>\n                            { val }\n                        </td>\n                    )\n                })}\n            </tr>\n        )\n    \n    })\n\n    return (\n        <section className = 'country-cases-section'>\n            <table className = 'country-case-table'>\n                <thead>\n                    <tr>\n                        {\n                            tableHead \n                        }\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        countriesList\n                    }\n                </tbody>\n            </table>\n        </section>\n    )\n}\n\nexport default CountriesCasesTable;","import React from  'react';\n\nconst FilterBySelect = props => {\n   const { select } = props;\n    \n   const selectList = select.options.map( option => {\n       return (\n            <option key = { option.title } value = { option.value } name = { select.name } >\n                { option.title }\n            </option>\n        ) \n   })\n\n    return (\n        <select \n            className = \"filter-by-select\" \n            defaultValue = {select.default} \n            onChange = { \n                ev => { \n                    props.filterSelected( \n                    { name: select.name, value: ev.target.value} )\n                } \n            }\n        >   \n            {\n                selectList\n            }\n        </select>\n    )\n}\n\nexport default FilterBySelect;","const types = {\n    SET_COUNTRY: 'SET_COUNTRY',\n    SET_COUNTRIES: 'SET_COUNTRIES',\n    SET_COUNTRIES_NAMES_LIST: 'SET_COUNTRIES_NAMES_LIST'\n}\nexport default types;\n","import axios from 'axios';\n\nconst BASE_URL =\n  process.env.NODE_ENV === 'production'\n    ? '/api/'\n    : 'http://localhost:4000/api/';\n\naxios.defaults.withCredentials = true;\n\nasync function ajax(endpoint, method = 'get', data = null, query = null) {\n  try {\n    const res = await axios({\n      url: BASE_URL + endpoint,\n      method,\n      data,\n      params: query\n    });\n    return res.data;\n  } catch (err) {\n    throw err.response.data.error;\n  }\n}\n\nexport default {\n  get(endpoint, data, query) {\n    return ajax(endpoint, 'GET', data, query);\n  }\n};\n","export default {\n    getFormatDate\n};\n\nfunction getFormatDate(date) {\n    date = new Date(date || '')  \n    return `${ date.getDate() }/${ date.getMonth()+1 }/${ date.getFullYear() }`;\n};","import httpService from './httpService';\nimport utilService from './utilService';\nimport axios from 'axios';\n\nexport default {\n    getAllCountries, \n    getByCountry,\n    getCountriesNamesList\n}\n\nconst COUNTRY_API_KEY = 'country';\nconst TRACKER_API_KEY = 'tracker';\n\nasync function getAllCountries () {\n    try {\n        return await httpService.get(TRACKER_API_KEY);\n    } catch (err) {\n        throw err;\n    };\n};\n\nasync function getByCountry(country) {\n    country = country \n        ? country\n        : localStorage.getItem(COUNTRY_API_KEY) \n            ? localStorage.getItem(COUNTRY_API_KEY)\n            : 'Israel';\n\n    try {\n        const res = await axios.get(`https://api.covid19api.com/total/country/${ country }`);  \n        localStorage.setItem(COUNTRY_API_KEY, country);   \n        return { \n            data: res.data,\n            createdAt: utilService.getFormatDate(new Date())\n        }\n\n    } catch (err) {\n        throw err;\n    };\n};\n\n\nasync function getCountriesNamesList() {\n    try {\n        const res = await axios.get('https://api.covid19api.com/countries'); \n        const sortedCountries = res.data.sort((a, b)=> {\n            return a.Country < b.Country ? -1 : 1\n        })\n        return sortedCountries;\n    } catch (err) {\n        throw err;\n    };\n};","import types from '../types';\nimport trackerService from '../../services/trackerService';\n\nconst setCountry = country => {\n    return {\n        type: types.SET_COUNTRY,\n        country\n    };\n};\n\nconst setCountries = countries => {\n    return {\n        type: types.SET_COUNTRIES,\n        countries\n    };\n};\n\nconst setCountriesNamesList = countriesNames => {\n    return {\n        type: types.SET_COUNTRIES_NAMES_LIST,\n        countriesNames\n    }\n}\n\nexport const getByCountry = country => {\n    return async dispatch => {\n        try {            \n            const countryData = await trackerService.getByCountry(country);\n            dispatch(setCountry(countryData));\n        } catch (err) {\n            throw err;\n        };\n    };\n};\n\nexport const getAllCountries = () => {\n    return async dispatch => {\n        try {\n            const countriesData = await trackerService.getAllCountries();\n            dispatch(setCountries(countriesData));\n        } catch (err) {\n            throw err;\n        };\n    };\n};\n\nexport const getCountriesNamesList = () => {\n    return async dispatch => {\n        try {\n            const countriesNamesList = await trackerService.getCountriesNamesList();\n            dispatch(setCountriesNamesList(countriesNamesList));\n        } catch (err) {\n            throw err;\n        };\n    };\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport FilterBySelect from './FilterBySelect';\n\nimport { getByCountry } from '../store/actions/trackerAction';\n\nconst FilterCountries = props => {\n    const dispatch = useDispatch();\n    const { country, countriesNameList } = props;\n    \n    const selectList = countriesNameList.map(currCountry => {\n        return {\n            value: currCountry.Country,\n            title: currCountry.Country,\n        }\n    })\n\n    const filterSelected = target => {\n        dispatch(getByCountry(target.value));\n    }\n\n    return (\n        <section className = 'filter-countries-section'>\n            <FilterBySelect \n                select = {{\n                    name: 'country',\n                    options: selectList,\n                    default: country\n                }}\n                filterSelected = { filterSelected }\n            />\n        </section>\n    )\n}\n\n\nexport default FilterCountries","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport FilterCountries from './FilterCountries';\n\nconst Navbar = props => {\n    \n    const country = useSelector(state => state.trackerReducer.country);\n    const countries = useSelector(state => state.trackerReducer.countries);\n    const countriesNameList = useSelector(state => state.trackerReducer.countriesNames);\n\n    return (\n        <section className = 'navbar-section'>\n            {\n                countriesNameList && country!==null \n                    ?   <FilterCountries \n                            country = { country.data[0].Country } \n                            countriesNameList = { countriesNameList }\n                        />\n                : false\n            }\n            {\n                props.path && country !== null \n                    ? <NavLink className = 'navbar-navlink' to = {'/'} >Home Page</NavLink>\n                        : !props.path && country !== null\n                            ? <NavLink className = 'navbar-navlink' to = { `/country/${country.data[0].Country}` }>{country.data[0].Country} Status Page</NavLink>\n                            : false\n            }\n            <h6 className = 'last-update-time'>Last Update Date {props.path && country !== null ? country.createdAt : countries ? countries.createdAt : 'Unknown'}</h6>\n        </section>\n    )\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Loader = () => {\n\n    return (\n        <section className = 'loader-section'>\n            <img \n                src = { require('../assets/img/loader.svg')} \n                className = 'loader-img'\n                alt = 'loading'\n            />\n        </section>\n    )\n}\n\nexport default Loader;","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport GraphPreview from '../components/GraphPreview';\nimport CountriesCasesTable from '../components/CountriesCasesTable';\nimport Navbar from '../components/Navbar';\nimport Loader from '../components/Loader';\n\nimport utilService from '../services/utilService';\nconst HomePage = () => {\n\n    const country = useSelector(state => state.trackerReducer.country);\n    const countries = useSelector(state => state.trackerReducer.countries);\n\n    const graphInfo = country \n        ? {\n            numList: country.data.map(val => {\n                return val.Confirmed\n            }),\n            xList: country.data.map(val => {\n                return utilService.getFormatDate(val.Date)\n            }),\n            title: country.data[0].Country \n                ? `Total Coronavirus Cases in ${country.data[0].Country}` \n                : `Couldn't Find Information About this Country, Try Different Country`\n        }\n        : null\n\n    return (\n        <section className = 'home-page-section'>\n            <Navbar/>\n            {\n                country !== null \n                    ? <GraphPreview graphInfo = { graphInfo }/>\n                    : <Loader/>\n            }\n            {\n                countries !== null \n                    ? <CountriesCasesTable countries = { countries }/>\n                    : <Loader/>\n            }\n        </section>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport GraphPreview from './GraphPreview';\nimport utilService from '../services/utilService';\n\nconst GraphList = props => {\n    const { graphCategories, country } = props;\n\n    const graphList = graphCategories.map((category, idx) => {\n        return (\n            <li className = 'graph-preview-li' key = { `${idx}-graph-preview` }>\n                <GraphPreview\n                    graphInfo = {{\n                        numList: country.data.map(val => {\n                            return val[category]\n                        }), \n                        xList: country.data.map(val => {\n                            return utilService.getFormatDate(val.Date)\n                        }),\n                        title: `${ category } Coronavirus Cases in ${ country.data[0].Country }` \n                    }}\n                />\n            </li>\n        )\n    });\n\n    return (\n        <ul className = 'graph-list-section clean-list'>\n            { \n                graphList\n            }\n        </ul>\n    )\n}\n\nexport default GraphList;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport GraphList from '../components/GraphList';\nimport Navbar from '../components/Navbar';\nimport Loader from '../components/Loader';\n\nimport { getByCountry } from '../store/actions/trackerAction';\n\nconst CountryPage = props => {\n    const dispatch = useDispatch();\n    const { countryName } = props.match.params;\n    const country = useSelector(state => state.trackerReducer.country);\n\n    useEffect(()=> {\n        dispatch(getByCountry(countryName));\n    }, [])\n\n\n        \n    return (\n        <section className = 'country-page-section'>\n            <Navbar path = {`/${countryName}`}/>\n            {\n                country !== null \n                    ? <GraphList \n                        graphCategories = { ['Confirmed', 'Active' ,'Recovered', 'Deaths'] }\n                        country = { country }\n                    />\n                    : <Loader/>\n            }\n        </section>\n    )\n}\n\nexport default CountryPage;\n\n","import React from 'react';\n\nconst Header = () => {\n    \n    return (\n        <section className = 'header-section'>\n            <img \n                src = { require('../assets/img/corona-virus.png')}\n                alt = 'corona-virus-img'\n                className = 'header-logo'\n            />       \n            <span className = 'header-circle-clip-path'/>     \n            <h2 className = 'header-title'>Coronavirus Tracker</h2>\n        </section>\n    )\n}\n\nexport default Header;","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport HomePage from './pages/HomePage';\nimport CountryPage from './pages/CountryPage';\nimport Header from './components/Header';\n\nimport { getAllCountries, getByCountry, getCountriesNamesList } from './store/actions/trackerAction';\n\nimport './styles/global.scss';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllCountries());\n    dispatch(getByCountry());\n    dispatch(getCountriesNamesList());\n  })\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header/>\n        <Switch>\n          <Route path = '/country/:name' component = { CountryPage }/>\n          <Route path = '/' component = { HomePage }/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import types from '../types';\n\nconst initState = {\n    country: null,\n    countries: null,\n    countriesName: []\n};\n\nconst trackerReducer = (state = initState, action) => {\n    switch (action.type) {\n        case types.SET_COUNTRIES: \n            return {\n                ...state,\n                countries: action.countries\n            }\n        case types.SET_COUNTRY: \n            return {\n                ...state, \n                country: action.country\n            }\n        case types.SET_COUNTRIES_NAMES_LIST: \n            return {\n                ...state,\n                countriesNames: action.countriesNames\n            }\n        default: \n            return state;\n    };\n};\n\nexport default trackerReducer;","import { combineReducers } from 'redux';\nimport trackerReducer from './trackerReducer';\n\nconst combinedReducer = combineReducers({\n    trackerReducer\n});\n\nexport default combinedReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport reducer from './store/reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducer, \n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <Provider store = { store }>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}